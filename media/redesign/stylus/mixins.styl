/*
  Provides man mixins for use within the MDN theme.
*/

@import 'vars'

/* vendorizes a propery */
vendorize(property, value) {
  -webkit-{property}: value;
  -moz-{property}: value;
  -ms-{property}: value;
  {property}: value;
}

vendorize-value(property, value, more = '') {
  {property}: unquote('-webkit-' + value + more);
  {property}: unquote('-moz-' + value + more);
  {property}: unquote('-ms-' + value + more);
  {property}: value + more;
}

/* prevents spacing of a given element if it's the last child */
prevent-last-child-spacing(element = '*', property = 'padding') {
  if (element is '*') {
    element = unquote(element);
  }

  & > {element}:last-child {
    {property}: 0;
  }
}

prevent-last-child-bottom-spacing(element = '*') {
  prevent-last-child-spacing(element, margin-bottom);
  prevent-last-child-spacing(element, padding-bottom);
}

/* text-decoration none, hover text-decoration underline */
reverse-link-decoration() {
  a {
    text-decoration: none;
    &:hover, &:active, &:focus {
      text-decoration: underline;
    }
  }
}

/* generates a background property for header and zones */
create-gradient-background(color = '', use-gradient = false) {
  if use-gradient {
    background-image: url(media-url-dir + 'header-background.png'), url(media-url-dir + 'mdn-header-gradient.png');
    background-repeat: repeat, repeat-x;
  } else {
    background-image: url(media-url-dir + 'header-background.png');
    background-repeat: repeat;
  }
  background-position: 0 0, 0 0, 0 0;
  if color {
    background-color: color;
  }
}

create-home-gradient-background(color) {
  create-gradient-background(color);
  background-image: url(media-url-dir + 'header-background.png'), url(media-url-dir + 'blueprint.png'), url(media-url-dir + 'mdn-header-gradient.png');
  background-repeat: repeat, repeat, repeat-x;
}

/* generates a cross-browser gradient */
create-gradient(start-color, end-color, direction = false) {
  if direction {
    vendorize-value(background, linear-gradient, '(' + direction + ', ' + start-color + ', ' + end-color + ')');
  } else {
    vendorize-value(background, linear-gradient, '(' + start-color + ', ' + end-color + ')');
  }
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='" + start-color + "', endColorstr='" + end-color + "', GradientType=1)"); /* IE6-9 */
}

/* generates the essential "before" and "after" code for pseudo-arrows */
generate-arrow(arrow-width = 10px) {
  &:before, &:after {
    content: ' ';
    height: 0;
    position: absolute;
    width: 0;
    border: arrow-width solid transparent;
  }
}

/* use this in the case of having to override styles from old template :( */
compat-important(prop, value) {
  {prop}: value !important;
}

/* Override an !important set by compat-important() with another !important.
   This should be removed after all CSS has been migrated to Stylus. */
override-compat-important(prop, value) {
    compat-important(prop, value);
}

/* used for style which are only present to override other styles -- these will be deleted once legacy design is gone */
compat-only(prop, value, more-selector = '') {
  compat-important(prop, value);

  if more-selector {
    & {more-selector} {
      compat-important(prop, value);
    }
  }
}

/* used to denote an old IE style */
old-ie(prop, value, important = false) {
  {prop}: value (important ? unquote('!important') : '');
}

/* used to create sliding animations */
slider(duration=default-animation-duration, maximum-height = 10000px) {
  overflow-y: hidden;
  max-height: maximum-height;
  vendorize(transition-property, all);
  vendorize(transition-duration, duration);
  vendorize(transition-timing-function, slide-timing-function);

  &.closed {
    max-height: 0;
  }
}

/* sets the base styles for messages (review, warning, error, notice, etc.) */
set-message-base() {
  compat-only(border-width, 5px);
  compat-only(border-style, solid);
  padding: (grid-spacing / 2);
  margin-bottom: grid-spacing;
  font-size: smaller-font-size;

  & *:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
  }
}

/* removes the implied "<main>" spacing so page is more customizable */
remove-main-spacing() {
  main > .center {
    width: auto;
    padding: 0;
    margin: 0;
    max-width: none;
  }
}

add-center-spacing() {
  padding-left: gutter-width;
  padding-right: gutter-width;
}

remove-center-spacing() {
  padding-left: 0;
  padding-right: 0;
}

/* overrides the navigation menu color - zones and homepage */
override-main-nav-color(hex) {
  #main-nav > ul > li > a, .user-state a {
    compat-important(color, hex);
  }

  #main-nav > ul > li {
    .search-wrap {
      background-color: rgba(255, 255, 255, 0.4);

      input, i, .search-trigger {
        color: hex !important;
      }
    }
  }

}

/* overrides the size of the navigation search box on certain pages */
minimize-header-search(size = 20px) {
  .search-wrap {
    width: size;
  }
}

/* sets an input tag's placeholder styles */
set-placeholder-style(prop, value) {
  &::-webkit-input-placeholder {
    {prop}: value;
  }
  &::-moz-input-placeholder {
    {prop}: value;
  }
}

/* uses the white logo instead of color logo */
use-white-logo() {
  #main-header .logo {
      background-image: url(media-url-dir + 'mdn_logo-wordmark-full_white.svg');
  }
}

/* for use 

/* 
  Allows setting of a property for LTR and RTL without having to deal with duplicating and maintaining selectors:

    example:   bidi-style(left, 20px, right, auto)
*/
bidi-style(ltr-prop, value, inverse-prop, inverse-value, make-important = false) {
  make-important = make-important ? unquote('!important') : unquote('')

  {ltr-prop}: value make-important;

  .html-rtl & {
    {inverse-prop}: value make-important;
    {ltr-prop}: inverse-value make-important;
  }
}

bidi-value(prop, ltr, rtl, make-important = false) {
  bidi-style(prop, ltr, prop, rtl, make-important);
}

/* Symbolic, simply notes that the style requires that JS is present :( */
requires-javascript(prop, value) {
  {prop}: value;
}


/*
  MIXINS LIKE CLASSES

  These are not dynamic but serve as mixins so that styles wont be repeated throughout files
*/
heading-1() {
  font-size: (content-block-margin * 2);
  letter-spacing: -2px;
}

heading-2() {
  font-size: 30px;
  letter-spacing: -1px;
}

big-search() {
  @extend .larger;
  display: block;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.2);
  border: 0;
  border-radius: 3px;
  font-family: heading-font-family;
  letter-spacing: -1px;
  width: 60%;
}

clear() {
  &:before, &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

/* used so that text is read by screen readers but appears off screen */
offscreen() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}


/*
  CLASSES TO BE EXTENDED BY OTHER CLASSES

  These are very "general" and non-specific on purpose
  There's a good chance these classes wont be used directly in HTML
*/

.title {
  font-weight: bold;
  text-transform: uppercase;
  color: text-color;
  text-decoration: none;
  display: block;
}

.smaller {
  font-size: smaller-font-size;
}

.larger {
  font-size: larger-font-size;
}

.grid-padding {
  padding: grid-spacing;
}

.heading-link { /* used in wiki content as well as the homepage */
  font-style: italic;
  font-size: base-font-size;
  font-weight: normal;
  display: inline-block;
  margin-left: (grid-spacing * 2);
}