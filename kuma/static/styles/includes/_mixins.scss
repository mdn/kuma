/*
Provides main mixins for use within the MDN theme.
********************************************************************** */

@function -remify($value) {
    $u: unit($value);
    $v: 0;

    @if $u == 'px' {
        $v: $value/$body-font-size * 1rem;
    }
    @else {
        $v: unit($value, u);
    }

    @return $v;
}

@mixin set-font-size($value) {
    font-size: $value; // if this is px it will be the fallback for the rem value, otherwise it will be the only declaration

    @if ($value != 'inherit') {
        // make sure we're working with px otherwise remify will just spit out what we spat out before
        $u: unit($value);
        @if $u == 'px' {
            font-size: -remify($value);
        }
    }
}

@mixin set-smaller-font-size() {
    @include set-font-size($smaller-font-size);
}
@mixin set-larger-font-size() {
    @include set-font-size($base-bump-font-size);
}

@mixin set-heading-font-family() {
    font-family: $heading-font-family;
    #{$selector-heading-font-fallback} {
        font-family: $heading-font-family-fallback;
    }
}

@mixin set-site-font-family() {
    font-family: $site-font-family;
    #{$selector-site-font-fallback} {
        font-family: $site-font-family-fallback;
    }
}


/*
Vendor prefixes
====================================================================== */

// vendorizes a propery based on it's value in the _prefixes lookup table
@mixin vendorize($property, $value) {

    // might be a quoted because it has commas in it, example: transition-property
    @if (type-of($value) == 'string') {
        $value: unquote($value);
    }

    @if (map-has-key($prefix-properties, $property)) {
        @each $prefix in map-get($prefix-properties, $property) {
            #{$prefix + $property}: $value;
        }
        // warn if we're vendorizing something unneccisarily
        @if (map-get($prefix-properties, $property)  == '') {
            @warn 'Warning in vendorize() ' + $property + ' does not need to be vendorized anymore.';
        }
    }
    @else {
        // warn if we're prefixing something unrecognized.
        @warn 'Warning in vendorize(): ' + $property + ' not listed in prefixes map';
        // provide unprefixed value as fallback
        #{$property}: $value;
    }
}

// vendorizes a value indescriminately by adding the prefixes defined by VENDOR-PREFIXES
@mixin vendorize-value($property, $value, $more: '') {
    @each $prefix in $VENDOR-PREFIXES {
        #{$property}: unquote($prefix + $value + $more);
    }
    #{$property}: unquote($value + $more);
}


/*
Prevent last child spacing
====================================================================== */

// prevents spacing of a given element if it's the last child
@mixin prevent-last-child-spacing($element: '*', $property: 'padding-bottom') {
    @if ($element == '*') {
        $element: unquote($element);
    }

    & > #{$element}:last-child {
        #{$property}: 0;
    }
}

@mixin prevent-last-child-bottom-spacing($element: '*') {
    @include prevent-last-child-spacing($element, margin-bottom);
    @include prevent-last-child-spacing($element, padding-bottom);
}


/*
Links
====================================================================== */

// text-decoration none, hover text-decoration underline
@mixin reverse-link-decoration() {
    a {
        text-decoration: none;

        &:hover,
        &:active,
        &:focus {
            text-decoration: underline;
        }
    }
}

// make a button look like a link
@mixin button-link() {
    @include vendorize(appearance, none);
    font-size: inherit;
    font-weight: inherit;
    letter-spacing: inherit;
    line-height: inherit;
    background-color: transparent;
    text-transform: inherit;
    border: 0;
    padding: 0;
    color: $link-color;

    &:hover,
    &:focus {
        text-decoration: underline;
    }
}


/*
Colours
====================================================================== */

/*
    creates a hex fallback of a property using an rgba value
    will use white as the background matte if no colour is provided
    */
@mixin rgba-fallback($property, $color, $opacity, $bg: #fff) {
    #{$property}: mix($color, $bg, $opacity * 100); // hex fallback
    #{$property}: rgba($color, $opacity); // rgba value
}

/* generates a cross-browser gradient */
@mixin create-gradient($start-color, $end-color, $direction: false) {
    @if $direction {
        @include vendorize-value(background, linear-gradient, '(' + $direction + ', ' + $start-color + ', ' + $end-color + ')');
    }
    @else {
        @include vendorize-value(background, linear-gradient, '(' + $start-color + ', ' + $end-color + ')');
    }
    -ms-filter: 'progid:DXImageTransform.Microsoft.gradient(startColorstr="#{$start-color}", endColorstr="#{$end-color}", GradientType=1)'; /* IE8-9 */
}

/* uses the white logo instead of color logo */
@mixin use-white-logo() {
    #main-header .logo {
        background-position: 0 -41px;
    }
}


/*
function to apply all the generated colors to a notification to theme it
-------------------------------------------------------------- */

@mixin notification-theme($color) {
    background-color: #{map-get( map-get($colors-lookup, $color), 'light')};
    border-color: #{map-get( map-get($colors-lookup, $color), 'medium')};
    color: $text-color;

    .notification-button {
        background-color: #{map-get( map-get($colors-lookup, $color), 'medium')};
        color: $text-color;

        &:hover,
        &:focus {
            background: transparent;
            text-decoration: none;
        }
    }

    .notification-img i {
        color: #{map-get( map-get($colors-lookup, $color), 'dark')};
    }

    button.close {
        color: #{map-get( map-get($colors-lookup, $color), 'medium')};

        &:hover,
        &:focus {
            color: #{map-get( map-get($colors-lookup, $color), 'dark')};
        }
    }
}

/*
coloured boxes
-------------------------------------------------------------- */

@mixin box-theme($color) {
    background: #{map-get( map-get($colors-lookup, $color), 'light')};
    border-color: #{map-get( map-get($colors-lookup, $color), 'medium')};
}


/* =================================================================== */


/* generates the essential "before" and "after" code for pseudo-arrows */
@mixin generate-arrow($arrow-width: 10px) {
    &:before,
    &:after {
        content: ' ';
        height: 0;
        position: absolute;
        width: 0;
        border: $arrow-width solid transparent;
    }
}


/* =================================================================== */

/* used to create sliding animations */
@mixin slider($duration: $default-animation-duration, $maximum-height: 10000px) {
    overflow-y: hidden;
    max-height: $maximum-height;
    @include vendorize(transition-property, all);
    @include vendorize(transition-duration, $duration);
    @include vendorize(transition-timing-function, $slide-timing-function);

    &.closed {
        max-height: 0;
    }
}


/* =================================================================== */

/* sets the base styles for messages (review, warning, error, notice, etc.) */
@mixin set-message-base($remove-last-spacing: true) {
    @include restrict-line-length();
    overflow: hidden;
    margin-bottom: $grid-spacing;
    @include bidi-style(border-left-width, $border-width, border-right-width, 0);
    @include bidi-style(border-left-style, solid, border-right-style, none);
    padding: ($grid-spacing / 2);

    @if ($remove-last-spacing) {
        @include prevent-last-child-bottom-spacing();
    }
}

/*
Spacing
====================================================================== */

/* removes the implied "<main>" spacing so page is more customizable */
@mixin remove-main-spacing() {
    main > .center {
        width: auto;
        padding: 0;
        margin: 0;
        max-width: none;
    }
}

@mixin add-center-spacing($spacing: $gutter-width) {
    padding-left: $spacing;
    padding-right: $spacing;
}

@mixin remove-center-spacing() {
    padding-left: 0;
    padding-right: 0;
}

/* =================================================================== */

/* sets an input tag's placeholder styles */
@mixin set-placeholder-style($prop, $value) {
    &::-webkit-input-placeholder { // old Chrome & Safari, we can remove this soon
        #{$prop}: $value;
    }

    &:-ms-input-placeholder { // IE 9-11, Edge
        #{$prop}: $value;
    }

    &::-moz-placeholder { // Old Firefox, we can remove this soon
        #{$prop}: $value;
    }

    &::placeholder { // Current Firefox, Chrome, Safari
        #{$prop}: $value;
    }
}

/*
Bidi / l10n
====================================================================== */

// Allows setting of a property for LTR and RTL without having to deal with duplicating and maintaining selectors:
// example: @include bidi-style(left, 20px, right, auto)
@mixin bidi-style($ltr-prop, $value, $inverse-prop, $inverse-value, $make-important: false) {
    $make-important: if($make-important, unquote('!important'), unquote(''));

    #{$ltr-prop}: $value $make-important;

    html[dir='rtl'] & {
        @if ($ltr-prop != $inverse-prop) {
            #{$inverse-prop}: $value $make-important;
        }
        #{$ltr-prop}: $inverse-value $make-important;
    }
}

@mixin bidi-value($prop, $ltr, $rtl, $make-important: false) {
    @include bidi-style($prop, $ltr, $prop, $rtl, $make-important);
}

@mixin bidi-value-vendorize($prop, $ltr, $rtl, $make-important: false) {
    $make-important: if($make-important, unquote('!important'), unquote(''));

    @include vendorize($prop, $ltr $make-important);

    html[dir='rtl'] & {
        @include vendorize($prop, $rtl $make-important);
    }
}

@mixin right-icons() {
    @include bidi-value(margin-right, $icon-margin, 0);
}

@mixin left-icons() {
    @include bidi-value(margin-left, $icon-margin, 0);
}


/*
MIXINS LIKE CLASSES
These are not dynamic but serve as mixins
====================================================================== */

@mixin heading-1() {
    @include set-font-size($h1-font-size);
    font-family: $heading-font-family;
    line-height: 1;
    #{$selector-heading-font-fallback} {
        font-family: $heading-font-family-fallback;
    }
}

@mixin heading-2() {
    @include set-font-size($h2-font-size);
    font-family: $heading-font-family;
    line-height: 1.2;
    #{$selector-heading-font-fallback} {
        font-family: $heading-font-family-fallback;
    }
}

@mixin callout() {
    @include restrict-line-length();
    @include set-font-size(22px);
    border: 5px solid $accent-light;
    border-width: 5px 0;
    border-image: linear-gradient(to right, $accent-dark, $accent-light) 10;
    padding: $grid-spacing 0;
    margin-bottom: $grid-spacing;

    @include prevent-last-child-spacing(p, margin-bottom);
}

@mixin clearfix() {
    clear: both;

    &:after {
        content: ' ';
        clear: both;
        display: table;
    }
}

@mixin title-header() {
    font-weight: bold;
    color: $text-color;
    text-decoration: none;
    display: block;
}

/*
pull aside
- assumes content has a bottom margin of its own
- floats to the right until there's not enough space for it
-------------------------------------------------------------- */

@mixin pull-aside() {
    @include column-4();
    min-width: 200px;
    @include bidi-value(float, right, left);
    @include bidi-value(margin, 0 0 ($grid-spacing / 2) $grid-spacing, 0 $grid-spacing ($grid-spacing / 2) 0);

    @media #{$mq-small-mobile-and-down} {
        width: 100%;
        @include bidi-value(margin, 0, 0);
    }
}


/*
Placeholders
====================================================================== */

%offscreen-placeholder {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}


@mixin restrict-line-length {
    box-sizing: border-box;
    max-width: $max-line-length;
}


@mixin full-width-content {
    box-sizing: border-box;
    width: 100%;
    max-width: 100%;

    p,
    ul,
    dl {
        max-width: 100%;
    }
}

/* When an element contains a label and a checkbox in order (as on the edit
   user page and elsewhere) make them appear on the same line, with the
   checkbox to the left of the label. */
%checkbox-label-container {
    @include clearfix();

    input[type='checkbox'] {
        @include bidi-value(float, left, right);
    }

    label {
        position: absolute;
        @include bidi-style(margin-left, 25px, margin-right, 0);
    }

    > p {
        @include bidi-value(clear, left, right);
    }
}


/* Styles for code blocks - used for wiki document and WYSIWYG editor */
%code-block {
    background: $code-block-background-color;
    border-left: $code-block-border-width $code-block-border-style $code-block-border-color;
    background-position: top center;
    background-repeat: repeat;
    color: $text-color;
    font-family: $code-block-font-family;
    font-weight: normal;
    direction: ltr;
    text-align: left;

    p {
        @include full-width-content();
    }

    code {
        background-color: transparent;
        padding: 0;
    }

    @include vendorize(tab-size, 4);
    @include vendorize(hyphens, none);
}

%highlight {

    &.highlight-spanned { // needs to preceed .highlight-span definition or links aren't coloured
        padding: 0;
        background-color: inherit;
        color: inherit;

        a {
            color: inherit;
        }
    }

    &,
    & .highlight-span {
        padding: 0 80px 0 4px;
        background-color: $text-color;
        color: #fff;
        font-weight: normal;
        line-height: 1.25;
        @include vendorize(box-decoration-break, clone);

        a {
            color: $accent-light;
        }

        code {
            background-color: rgba(255, 255, 255, 0.4) !important;
            color: #fff !important;
        }
    }
}

%cta-link {
    @include button-link();
    position: relative;
    box-sizing: border-box;
    display: inline-block;
    border-bottom: 2px solid;
    @include bidi-style(padding, 10px 30px 10px 0, padding-left, 10px 0 10px 30px);
    @include bidi-value(text-align, left, right);

    &:after {
        position: absolute;
        bottom: 10px;
        @include bidi-style(right, 0, left, auto);
        @include bidi-value(content, '\f061', '\f060');
        font-family: fontAwesome;
        transition: margin .1s ease-in-out;
    }

    &:hover,
    &:focus {
        text-decoration: none;

        &:after {
            @include bidi-style(margin-right, -4px, margin-left, 0);
        }
    }

    #{$selector-icon} {
        margin-top: 4px;
    }
}


/*
Grid
====================================================================== */

/*
grid - 12 columns assuming a 3% margin
-------------------------------------------------------------- */
@function -calc-col-width($col-span) {
    $grid-margin-numb : $grid-margin / 1%; // remove percent unit
    $col-percent : (100 - $grid-margin-numb * 11) / 12 * $col-span + $grid-margin-numb * ($col-span - 1);
    $col-percent : if($col-percent > 100, 100, $col-percent); // not over 100
    $col-percent : $col-percent;
    $col-percent : $col-percent * 1%; // add % unit
    @return $col-percent;
}

@mixin column-1() {
    width: -calc-col-width(1); // 5.583%;
}
@mixin column-2() {
    width: -calc-col-width(2); // 14.167%;
}
@mixin column-3() {
    width: -calc-col-width(3); // 22.75%;
}
@mixin column-strip() {
    width: -calc-col-width(3); // 22.75%;
}
@mixin column-quarter() {
    width: -calc-col-width(3); // 22.75%;
}
@mixin column-4() {
    width: -calc-col-width(4); // 31.333%;
}
@mixin column-third() {
    width: -calc-col-width(4); // 31.333%;
}
@mixin column-5() {
    width: -calc-col-width(5); // 39.917%;
}
@mixin column-6() {
    width: -calc-col-width(6); // 48.5%;
}
@mixin column-half() {
    width: -calc-col-width(6); // 48.5%;
}
@mixin column-7() {
    width: -calc-col-width(7); // 57.083%;
}
@mixin column-8() {
    width: -calc-col-width(8); // 65.667%;
}
@mixin column-9() {
    width: -calc-col-width($grid-width-column-main); // 74.25%
}
@mixin column-main() {
    width: -calc-col-width($grid-width-column-main); // 74.25%
}
@mixin column-10() {
    width: -calc-col-width(10); // 82.833%;
}
@mixin column-11() {
    width: -calc-col-width(11); // 91.417%;
}
@mixin column-12() {
    width: auto;
    margin: 0;
    float: none;
}
@mixin column-all() {
    width: auto;
    margin: 0;
    float: none;
}
