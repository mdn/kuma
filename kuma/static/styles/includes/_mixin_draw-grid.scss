/*
12-column grid system.  HTML structure should be:

    <div class="column-container">
      <!-- any number of columns -->
      <div class="column-x"></div>
      <div class="column-x"></div>
      <div class="column-x"></div>
    </div>

.column-x elements is automatically floated and assigned a right margin.
.column-container clears the .column-x floats and removes margin from the last column
.column-container-reverse reverses the floats so that the last visual element appears first in the child list
====================================================================== */

/* Outputs relevant grid styles once */
@mixin draw-grid() {
    /* this is a "helper" which automatically formats its column children, clears the floats afterward, removes margin from last item */
    .column-container {
        @include clearfix();

        #{$grid-column-selector} {
            margin-right: $grid-margin;
            @include bidi-value(float, left, right);
            min-height: 1px;

            &:last-child {
                @include bidi-value(margin-right, 0, $grid-margin);
            }
        }

        &.column-container-reverse {

            #{$grid-column-selector} {
                @include bidi-value(float, right, left);

                &:first-child {
                    @include bidi-value(margin-right, 0, $grid-margin);
                }

                &:last-child {
                    @include bidi-value(margin-right, $grid-margin, 0);
                }
            }
        }
    }

    /* adjustments to reverse the column containers in RTL */
    html[dir='rtl'] .column-container {
        #{$grid-column-selector} {
            &:first-child {
                margin-right: 0;
            }
        }
    }

    .column-closed {
        display: none;
    }

    .column-1 {
        @include column-1();
    }
    .column-2 {
        @include column-2();
    }
    .column-3, .column-strip, .column-quarter {
        @include column-3();
    }
    .column-4, .column-third {
        @include column-4();
    }
    .column-5 {
        @include column-5();
    }
    .column-6, .column-half {
        @include column-6();
    }
    .column-7 {
        @include column-7();
    }
    .column-8 {
        @include column-8();
    }
    .column-9, .column-main {
        @include column-9();
    }
    .column-10 {
        @include column-10();
    }
    .column-11 {
        @include column-11();
    }
    .column-12, .column-all {
        @include column-12();
    }

    /*  tablet grid width */
    @media #{$media-query-tablet} {
        .column-container {
            &.column-container-reverse {
                margin-left: 0;
            }
        }
    }

     /*
         mobile - just make everything its own column
         preemtpively using !important so we don't run into css precedence issues -- we absolutely always want one-column view
     */
     @media #{$media-query-mobile} {
        .column-1, .column-2, .column-3, .column-4, .column-5, .column-6, .column-7, .column-8, .column-9, .column-10, .column-11, .column-12,
        .column-strip, .column-quarter, .column-third, .column-half, .column-all, .column-container #{$grid-column-selector} {
            @include clearfix();
            width: auto !important;
            margin-left: 0 !important;
            margin-right: 0 !important;
            float: none !important;
        }
    }
}
