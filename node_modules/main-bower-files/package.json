{
  "name": "main-bower-files",
  "version": "2.5.0",
  "description": "Get main files from your installed bower packages.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ck86/main-bower-files.git"
  },
  "keywords": [
    "bower",
    "gulp",
    "gulpfriendly"
  ],
  "author": {
    "name": "Christopher Knötschke"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ck86/main-bower-files/issues"
  },
  "homepage": "https://github.com/ck86/main-bower-files",
  "devDependencies": {
    "should": "^4.0.4",
    "mocha": "^2.0.1"
  },
  "dependencies": {
    "colors": "^0.6.2",
    "glob": "^4.0.3",
    "globule": "^0.2.0",
    "minimatch": "^1.0.0",
    "strip-json-comments": "^1.0.2"
  },
  "readme": "main-bower-files\n================\n![status](https://secure.travis-ci.org/ck86/main-bower-files.png?branch=master)\n\n- [Usage](#usage)\n    - [Usage with gulp](#usage-with-gulp)\n    - [Usage with grunt](#usage-with-grunt)\n- [Options](#options)\n    - [Overrides Options](#overrides-options)\n        - [main](#main)\n        - [ignore](#ignore)\n        - [dependencies](#dependencies)\n    - [Common Options](#common-options)\n        - [debugging](#debugging)\n        - [main](#main-1)\n        - [env](#env)\n        - [paths](#paths)\n        - [checkExistence](#checkexistence)\n        - [includeDev](#includedev)\n        - [includeSelf](#includeself)\n        - [filter](#filter)\n\n## Usage\n\n```javascript\nvar mainBowerFiles = require('main-bower-files');\nvar files = mainBowerFiles([[filter, ]options]);\n```\n\nIf first argument is type of `String` or `Array` it will be used as a filter, otherwise it will be used as options.\n\nThis will read your `bower.json`, iterate through your dependencies and returns an array of filesdefined in the main property of the packages `bower.json`.\nYou can override the behavior if you add an `overrides` property to your own `bower.json`.\n\n### Usage with gulp\n\n```javascript\nvar gulp = require('gulp');\nvar mainBowerFiles = require('main-bower-files');\n\ngulp.task('TASKNAME', function() {\n    return gulp.src(mainBowerFiles())\n        .pipe(/* what you want to do with the files */)\n});\n```\n\n#### You've got a flat folder/file structure after `.pipe(gulp.dest('my/dest/path'))`?\n\n`mainBowerFiles` returns an array of files where each file is a relative path without any globs (** or *). gulp requires globs in these paths to apply the base path. Because of this, you always have to tell gulp your bower base path (the path to the bower_components directory) explicitly.\nHere is an example:\n\n```javascript\nvar gulp = require('gulp');\nvar mainBowerFiles = require('main-bower-files');\n\ngulp.task('TASKNAME', function() {\n    return gulp.src(mainBowerFiles(/* options */), { base: 'path/to/bower_components' })\n        .pipe(/* what you want to do with the files */)\n});\n```\n\nNow you should get something like `my/dest/path/jquery/jquery.js` if you have jquery installed.\n\n### Usage with grunt\n\n**_\\* COMING SOON \\*_**\n\n\n## Options\n\n### Overrides Options\n\nThese options can be set directly in your `bower.json` file, e.g.:\n\n```json\n{\n    \"name\": \"your-package-name\",\n    \"dependencies\": {\n        \"BOWER-PACKAGE\": \"*\"\n    },\n    \"overrides\": {\n        \"BOWER-PACKAGE\": {\n            // Here you can override the main files or ignoring this package, for more info see options\n        }\n    }\n}\n```\n\n#### main\n\nType: `String` or `Array` or `Object`  \nYou can specify which files should be selected. You can `main-bower-files` select files based on the `process.env.NODE_ENV` if you provide an `Object` with `keys` as the environment, e.g.:\n\n```json\n{\n    \"overrides\": {\n        \"BOWER-PACKAGE\": {\n            \"main\": {\n                \"development\": \"file.js\",\n                \"production\": \"file.min.js\",\n            }\n        }\n    }\n}\n```\n\nYou can also use glob pattern to select files, e.g.:\n\n```json\n{\n    \"overrides\": {\n        \"BOWER-PACKAGE\": {\n            \"main\": \"**/*.js\"\n        }\n    }\n}\n```\n\n#### ignore\n\nType: `Boolean` Default: `false`  \nSet to `true` if you want to ignore this package.\n\n#### dependencies\n\nType: `Object`  \nYou can override the dependencies of a package. Set to `null` to ignore the dependencies.\n\n### Common Options\n\nThese options can be passed to this plugin, e.g: `mainBowerFiles(/* options*/)`\n\n#### debugging\n\nType: `boolean` Default: `false`  \nSet to `true` to enable debugging output.\n\n#### main\n\nType: `String` or `Array` or `Object` Default: `null`  \nYou can specify for all packages a default main property which will be used if the package does not provide a main property.\n\n#### env\n\nType: `String` Default: `process.env.NODE_ENV`  \nIf `process.env.NODE_ENV` is not set you can use this option.\n\n#### paths\n\nType: `Object` or `String`  \nYou can specify the paths where the following bower specific files are located:\n`bower_components`, `.bowerrc` and `bower.json`  \nFor example:\n\n```javascript\nmainBowerFiles({\n    paths: {\n        bowerDirectory: 'path/for/bower_components',\n        bowerrc: 'path/for/.bowerrc',\n        bowerJson: 'path/for/bower.json'\n    }\n})\n.pipe(gulp.dest('client/src/lib'));\n```\n\nIf a `String` is supplied instead, it will become the basepath for default paths.  \nFor example:\n\n```javascript\nmainBowerFiles({ paths: 'path/for/project' });\n/*\n    {\n        bowerDirectory: 'path/for/project/bower_components',\n        bowerrc: 'path/for/project/.bowerrc',\n        bowerJson: 'path/for/project/bower.json'\n    }\n*/\n```\n\n#### checkExistence\n\nType: `boolean` Default: `false`  \nSet this to true if you want that the plugin checks every file for existence.\nIf enabled and a file does not exists, the plugin will throw an exception.\n\n#### includeDev\n\nType: `mixed` Default: `false`  \nYou can include your devDependencies in two ways:\n* Set this option to `inclusive` or true to add the devDependencies to your dependencies\n* or use `exclusive` to exclude your dependencies\n\n#### includeSelf\n\nType: `boolean` Default: `false`  \nSet this to true to add the main files to your dependencies\n\n### filter\nType: `RegExp` or `function` or `glob` Default: `null`  \nYou can filter the list of files by a regular expression, glob or callback function (the first and only argument is the file path).\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Christopher Knötschke <cknoetschke@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "main-bower-files@2.5.0",
  "dist": {
    "shasum": "4117243d4a9ac4f2ba110ddd96c65b5e7fcfe343"
  },
  "_from": "main-bower-files@2.5.0",
  "_resolved": "https://registry.npmjs.org/main-bower-files/-/main-bower-files-2.5.0.tgz"
}
