{
  "name": "timers-ext",
  "version": "0.1.0",
  "description": "Timers extensions",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/timers-ext.git"
  },
  "keywords": [
    "timeout",
    "delay",
    "interval",
    "time",
    "timer",
    "timers"
  ],
  "dependencies": {
    "es5-ext": "~0.10.2",
    "next-tick": "~0.2.2"
  },
  "devDependencies": {
    "tad": "~0.1.21"
  },
  "scripts": {
    "test": "node node_modules/tad/bin/tad"
  },
  "license": "MIT",
  "readme": "# timers-ext\n## Timers extensions\n\n### Installation\n\n\t$ npm install timers-ext\n\t\nTo port it to Browser or any other (non CJS) environment, use your favorite CJS bundler. No favorite yet? Try: [Browserify](http://browserify.org/), [Webmake](https://github.com/medikoo/modules-webmake) or [Webpack](http://webpack.github.io/)\n\n### API\n\n#### MAX\\_TIMEOUT _(timers-ext/max-timeout)_\n\nMaximum possible timeout value in milliseconds. It equals to maximum positive value for 32bit signed integer, so _2³¹ (2147483647)_, which makes it around 24.9 days\n\n#### delay(fn[, timeout]) _(timers-ext/delay)_\n\nReturns function which when invoked will call _fn_ function after specified \n_timeout_. If _timeout_ is not provided [nextTick](https://github.com/medikoo/next-tick/#next-tick) propagation is used.\n\n#### once(fn[, timeout]) _(timers-ext/timeout)_\n\nMakes sure _fn_ function is invoked only once in given _timeout_ span. If _timeout_ is not provided [nextTick](https://github.com/medikoo/next-tick/#next-tick) propagation is used.\n\n\n```javascript\nvar nextTick = require('next-tick');\nvar logFoo = function () { console.log('foo'); };\nvar logFooOnce = require('timers-ext/once')(logFoo);\n\nlogFooOnce();\nlogFooOnce(); // ignored, logFoo will be logged only once\nlogFooOnce(); // ignored\n\n\nnextTick(function () {\n logFooOnce(); // Invokes another log (as tick passed)\n logFooOnce(); // ignored\n logFooOnce(); // ignored\n});\n\n```\n\n#### validTimeout(timeout) _(timers-ext/valid-timeout)_\n\nValidates timeout value.  \nFor `NaN` resolved _timeout_ `0` is returned.\nIf _timeout_ resolves to a number:\n- for _timeout < 0_ `0` is returned\n- for _0 >= timeout <= [MAX_TIMEOUT](#max_timeout-timers-extmax-timeout)_, `timeout` value is returned\n- for _timeout > [MAX_TIMEOUT](#max_timeout-timers-extmax-timeout)_ exception is thrown\n\n### Tests [![Build Status](https://travis-ci.org/medikoo/timers-ext.png)](https://travis-ci.org/medikoo/timers-ext)\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/medikoo/timers-ext/issues"
  },
  "homepage": "https://github.com/medikoo/timers-ext",
  "_id": "timers-ext@0.1.0",
  "dist": {
    "shasum": "00554f5cbe801768e17773d7d5da86fc62c1f32d"
  },
  "_from": "timers-ext@0.1.x",
  "_resolved": "https://registry.npmjs.org/timers-ext/-/timers-ext-0.1.0.tgz"
}
